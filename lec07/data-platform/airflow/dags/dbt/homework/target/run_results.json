{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-10T16:10:08.838378Z", "invocation_id": "2fc17a6a-3b9c-4452-90bf-fe2c74a7a53c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-10T16:10:08.529085Z", "completed_at": "2025-05-10T16:10:08.543928Z"}, {"name": "execute", "started_at": "2025-05-10T16:10:08.544432Z", "completed_at": "2025-05-10T16:10:08.652421Z"}], "thread_id": "Thread-1", "execution_time": 0.12479472160339355, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.homework.stg_iris", "compiled": true, "compiled_code": "with source as (\n    select * from \"analytics\".\"analytics\".\"iris_dataset\"\n)\n\nselect\n    cast(sepal_length as numeric) sepal_length,\n    cast(sepal_width as numeric) sepal_width,\n    cast(petal_length as numeric) petal_length,\n    cast(petal_width as numeric) petal_width,\n    species\nfrom source", "relation_name": "\"analytics\".\"analytics\".\"stg_iris\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-10T16:10:08.657973Z", "completed_at": "2025-05-10T16:10:08.770171Z"}, {"name": "execute", "started_at": "2025-05-10T16:10:08.770747Z", "completed_at": "2025-05-10T16:10:08.819515Z"}], "thread_id": "Thread-3", "execution_time": 0.16296911239624023, "adapter_response": {"_message": "SELECT 150", "code": "SELECT", "rows_affected": 150}, "message": "SELECT 150", "failures": null, "unique_id": "model.homework.iris_processed", "compiled": true, "compiled_code": "\n\nwith import_iris as (\n    select *\n    from \"analytics\".\"analytics\".\"stg_iris\"\n)\nselect\n    sepal_length,\n    sepal_width,\n    petal_length,\n    petal_width,\n    -- K Bins Discretization\n    \n        \n\n    \n        NTILE(5) over (order by sepal_length)\n    \n\n as sepal_length_quantile_bin,\n        \n\n    \n        \n        floor(\n        (\n            sepal_length - (min(sepal_length) over ())\n        )\n        /\n        (\n            ((max(sepal_length) over ()) - (min(sepal_length) over ())) / 4::float\n        )\n        ) + 1\n    \n\n as sepal_length_uniform_bin,\n    \n        \n\n    \n        NTILE(5) over (order by sepal_width)\n    \n\n as sepal_width_quantile_bin,\n        \n\n    \n        \n        floor(\n        (\n            sepal_width - (min(sepal_width) over ())\n        )\n        /\n        (\n            ((max(sepal_width) over ()) - (min(sepal_width) over ())) / 4::float\n        )\n        ) + 1\n    \n\n as sepal_width_uniform_bin,\n    \n        \n\n    \n        NTILE(5) over (order by petal_length)\n    \n\n as petal_length_quantile_bin,\n        \n\n    \n        \n        floor(\n        (\n            petal_length - (min(petal_length) over ())\n        )\n        /\n        (\n            ((max(petal_length) over ()) - (min(petal_length) over ())) / 4::float\n        )\n        ) + 1\n    \n\n as petal_length_uniform_bin,\n    \n        \n\n    \n        NTILE(5) over (order by petal_width)\n    \n\n as petal_width_quantile_bin,\n        \n\n    \n        \n        floor(\n        (\n            petal_width - (min(petal_width) over ())\n        )\n        /\n        (\n            ((max(petal_width) over ()) - (min(petal_width) over ())) / 4::float\n        )\n        ) + 1\n    \n\n as petal_width_uniform_bin,\n    \n-- Scaling\n    \n        \n\n    \n\n    \n    \n    \n\n    \n    \n    \n\n    (\n        sepal_length - 5.8\n    )\n    /\n    (\n        6.4 - 5.1\n    )\n\n as sepal_length_robust_scaled,\n        \n\n    (sepal_length) / (max(abs(sepal_length)) over ())::FLOAT\n\n as sepal_length_max_absolute_scaled,\n        \n\n    \n    (\n        ((sepal_length) - (min(sepal_length) over ()))\n        /\n        ((max(sepal_length) over ()) - (min(sepal_length) over ()))::FLOAT\n    )\n    *\n    (1.0 - 0.0)\n    +\n    0.0\n\n as sepal_length_max_min_max_scaled,\n    \n        \n\n    \n\n    \n    \n    \n\n    \n    \n    \n\n    (\n        sepal_width - 3.0\n    )\n    /\n    (\n        3.3 - 2.8\n    )\n\n as sepal_width_robust_scaled,\n        \n\n    (sepal_width) / (max(abs(sepal_width)) over ())::FLOAT\n\n as sepal_width_max_absolute_scaled,\n        \n\n    \n    (\n        ((sepal_width) - (min(sepal_width) over ()))\n        /\n        ((max(sepal_width) over ()) - (min(sepal_width) over ()))::FLOAT\n    )\n    *\n    (1.0 - 0.0)\n    +\n    0.0\n\n as sepal_width_max_min_max_scaled,\n    \n        \n\n    \n\n    \n    \n    \n\n    \n    \n    \n\n    (\n        petal_length - 4.35\n    )\n    /\n    (\n        5.1 - 1.6\n    )\n\n as petal_length_robust_scaled,\n        \n\n    (petal_length) / (max(abs(petal_length)) over ())::FLOAT\n\n as petal_length_max_absolute_scaled,\n        \n\n    \n    (\n        ((petal_length) - (min(petal_length) over ()))\n        /\n        ((max(petal_length) over ()) - (min(petal_length) over ()))::FLOAT\n    )\n    *\n    (1.0 - 0.0)\n    +\n    0.0\n\n as petal_length_max_min_max_scaled,\n    \n        \n\n    \n\n    \n    \n    \n\n    \n    \n    \n\n    (\n        petal_width - 1.3\n    )\n    /\n    (\n        1.8 - 0.3\n    )\n\n as petal_width_robust_scaled,\n        \n\n    (petal_width) / (max(abs(petal_width)) over ())::FLOAT\n\n as petal_width_max_absolute_scaled,\n        \n\n    \n    (\n        ((petal_width) - (min(petal_width) over ()))\n        /\n        ((max(petal_width) over ()) - (min(petal_width) over ()))::FLOAT\n    )\n    *\n    (1.0 - 0.0)\n    +\n    0.0\n\n as petal_width_max_min_max_scaled,\n    \n\n    -- Log Transformation\n    \n        \n\n    case\n        when sepal_length is null or sepal_length + 0 <= 0 then null\n        else log(10, sepal_length + 0)\n    end\n\n as sepal_length_logged,\n    \n        \n\n    case\n        when sepal_width is null or sepal_width + 0 <= 0 then null\n        else log(10, sepal_width + 0)\n    end\n\n as sepal_width_logged,\n    \n        \n\n    case\n        when petal_length is null or petal_length + 0 <= 0 then null\n        else log(10, petal_length + 0)\n    end\n\n as petal_length_logged,\n    \n        \n\n    case\n        when petal_width is null or petal_width + 0 <= 0 then null\n        else log(10, petal_width + 0)\n    end\n\n as petal_width_logged,\n    \n\n    -- Binarization\n    \n        \n\n    \n\n    \n        \n\n        \n    \n\n    case\n        when sepal_length >=\n            \n                5.8\n            \n            then 1\n        else 0\n    end\n\n as sepal_length_binarized,\n    \n        \n\n    \n\n    \n        \n\n        \n    \n\n    case\n        when sepal_width >=\n            \n                3.0\n            \n            then 1\n        else 0\n    end\n\n as sepal_width_binarized,\n    \n        \n\n    \n\n    \n        \n\n        \n    \n\n    case\n        when petal_length >=\n            \n                4.35\n            \n            then 1\n        else 0\n    end\n\n as petal_length_binarized,\n    \n        \n\n    \n\n    \n        \n\n        \n    \n\n    case\n        when petal_width >=\n            \n                1.3\n            \n            then 1\n        else 0\n    end\n\n as petal_width_binarized,\n    \n\n    -- Standardization\n    \n        \n\n    \n    (\n        (sepal_length - avg(sepal_length) over ())\n        /\n        (stddev(sepal_length) over ())::FLOAT\n    )\n    *\n    1\n    +\n    0\n\n as sepal_length_standardized,\n    \n        \n\n    \n    (\n        (sepal_width - avg(sepal_width) over ())\n        /\n        (stddev(sepal_width) over ())::FLOAT\n    )\n    *\n    1\n    +\n    0\n\n as sepal_width_standardized,\n    \n        \n\n    \n    (\n        (petal_length - avg(petal_length) over ())\n        /\n        (stddev(petal_length) over ())::FLOAT\n    )\n    *\n    1\n    +\n    0\n\n as petal_length_standardized,\n    \n        \n\n    \n    (\n        (petal_width - avg(petal_width) over ())\n        /\n        (stddev(petal_width) over ())::FLOAT\n    )\n    *\n    1\n    +\n    0\n\n as petal_width_standardized,\n    \n-- Interactions\n    \n        \n            \n            \n            \n\n    \n        (sepal_length * sepal_width)\n    \n\n as sepal_length_x_sepal_width_interaction,\n            \n\n    \n        (sepal_length + sepal_width)\n    \n\n as sepal_length_plus_sepal_width_interaction,\n        \n            \n            \n            \n\n    \n        (sepal_length * petal_length)\n    \n\n as sepal_length_x_petal_length_interaction,\n            \n\n    \n        (sepal_length + petal_length)\n    \n\n as sepal_length_plus_petal_length_interaction,\n        \n            \n            \n            \n\n    \n        (sepal_length * petal_width)\n    \n\n as sepal_length_x_petal_width_interaction,\n            \n\n    \n        (sepal_length + petal_width)\n    \n\n as sepal_length_plus_petal_width_interaction,\n        \n    \n        \n            \n            \n            \n\n    \n        (sepal_width * petal_length)\n    \n\n as sepal_width_x_petal_length_interaction,\n            \n\n    \n        (sepal_width + petal_length)\n    \n\n as sepal_width_plus_petal_length_interaction,\n        \n            \n            \n            \n\n    \n        (sepal_width * petal_width)\n    \n\n as sepal_width_x_petal_width_interaction,\n            \n\n    \n        (sepal_width + petal_width)\n    \n\n as sepal_width_plus_petal_width_interaction,\n        \n    \n        \n            \n            \n            \n\n    \n        (petal_length * petal_width)\n    \n\n as petal_length_x_petal_width_interaction,\n            \n\n    \n        (petal_length + petal_width)\n    \n\n as petal_length_plus_petal_width_interaction,\n        \n    \n        \n    \nspecies,    \n    -- Label Encoding\n    \n\n    dense_rank() over (order by species) - 1\n\n as species_label_encoded,\n    -- One Hot Encoding\n    \n\n    \n\n    \n        \n    \n\n    \n\n    \n\n        case\n            when species = 'setosa' then 1\n            else 0\n        end as is_species__setosa,\n\n    \n\n        case\n            when species = 'versicolor' then 1\n            else 0\n        end as is_species__versicolor,\n\n    \n\n        case\n            when species = 'virginica' then 1\n            else 0\n        end as is_species__virginica,\n\n    \n\n    case\n        when species is null then 1\n        else 0\n    end as is_species__\n\n\nfrom \"analytics\".\"analytics\".\"stg_iris\"", "relation_name": "\"analytics\".\"analytics\".\"iris_processed\"", "batch_results": null}], "elapsed_time": 0.40784192085266113, "args": {"log_format": "default", "printer_width": 80, "invocation_command": "dbt --profile my_dbt_project run --project-dir=/opt/airflow/dags/dbt/homework --models models/mart models/staging --vars {\"is_test\": false, \"data_date\": \"2025-05-10\"}", "profiles_dir": "/opt/airflow/dags/dbt", "log_level": "info", "select": ["models/mart", "models/staging"], "which": "run", "source_freshness_run_project_hooks": false, "state_modified_compare_more_unrendered_values": false, "exclude": [], "vars": {"is_test": false, "data_date": "2025-05-10"}, "log_level_file": "debug", "cache_selected_only": false, "log_file_max_bytes": 10485760, "use_colors_file": true, "send_anonymous_usage_stats": true, "indirect_selection": "eager", "require_batched_execution_for_custom_microbatch_strategy": false, "empty": false, "macro_debugging": false, "static_parser": true, "favor_state": false, "defer": false, "project_dir": "/opt/airflow/dags/dbt/homework", "require_nested_cumulative_type_params": false, "partial_parse": true, "strict_mode": false, "print": true, "require_resource_names_without_spaces": false, "quiet": false, "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "introspect": true, "profile": "my_dbt_project", "state_modified_compare_vars": false, "require_yaml_configuration_for_mf_time_spines": false, "log_path": "/opt/airflow/dags/dbt/homework/logs", "show_resource_report": false, "populate_cache": true, "skip_nodes_if_on_run_start_fails": false, "use_colors": true, "log_format_file": "debug", "partial_parse_file_diff": true}}